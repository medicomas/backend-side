// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// check ✅
model User {
  id              Int        @id @default(autoincrement())
  email           String     @unique
  hashed_password String
  names           String
  surnames        String
  doctor          Doctor?
  Admin           Admin?
  roles           UserRole[]
}

// check ✅
model UserRole {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

// check ✅
model Admin {
  id_user Int @unique

  user User @relation(fields: [id_user], references: [id])
}

// check ✅
model Doctor {
  user           User             @relation(fields: [id_user], references: [id])
  id_user        Int              @unique
  documentType   String
  document       String           @unique
  gender         String           @db.Char(1)
  appointment    Appointment[]
}

// check ✅
model Patient {
  id           Int           @id @default(autoincrement())
  names        String
  surnames     String
  documentType String
  document     String        @unique
  gender       String        @db.Char(1)
  phone_number String // is this optional?
  birthdate    DateTime?     @db.Date
  appointments Appointment[]
}

// Consulta
// ========
// Las consultas representan la información recolectada de un paciente
// en una visita a la clínica
model Appointment {
  id                     Int      @id @default(autoincrement())
  id_doctor              Int
  id_patient             Int
  has_ended              Boolean  @default(false)
  date                   DateTime
  anamnesis              String /// Relato cronológico
  id_workplan            Int      @unique
  id_vitalsigns          Int      @unique
  id_physicalexploration Int      @unique

  vital_signs          VitalSigns          @relation(fields: [id_vitalsigns], references: [id])
  physical_exploration PhysicalExploration @relation(fields: [id_physicalexploration], references: [id])
  workplan             WorkPlan            @relation(fields: [id_workplan], references: [id])
  patient              Patient             @relation(fields: [id_patient], references: [id])
  doctor               Doctor              @relation(fields: [id_doctor], references: [id_user])
}

/// Constantes Vitales
model VitalSigns {
  id                      Int          @id @default(autoincrement())
  appointment             Appointment?
  presion_arterial        Float?
  temperatura             Float?
  frecuencia_respiratoria Float?
  frecuencia_cardiaca     Float?
  peso                    Float?
  talla                   Float?
  imc                     Float?
}

/// Exploración Física
model PhysicalExploration {
  id               Int          @id @default(autoincrement())
  appointment      Appointment?
  abdomen_y_pelvis String       @default("")
  ano_y_recto      String       @default("")
  aspecto_general  String       @default("")
  cabeza_y_cuello  String       @default("")
  cardiovascular   String       @default("")
  cavidad_oral     String       @default("")
  genito_urinario  String       @default("")
  locomotor        String       @default("")
  neurologico      String       @default("")
}

/// Plan de Trabajo
model WorkPlan {
  id          Int          @id @default(autoincrement())
  indications String
  diagnoses   Diagnose[]
  treatements Treatment[]
  appointment Appointment?
}

model Diagnose {
  id              Int              @id @default(autoincrement())
  ICD10_code      String
  id_workplan     Int
  workplan        WorkPlan         @relation(fields: [id_workplan], references: [id])
}

model Treatment {
  id          Int      @id @default(autoincrement())
  id_workplan Int
  medication  String
  dose        String
  workplan    WorkPlan @relation(fields: [id_workplan], references: [id])
}
